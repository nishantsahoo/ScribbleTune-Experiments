{"code":"import { props as noteProps, build as fromNote } from \"tonal-note\";\r\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\r\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\r\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\r\nfunction encode(props) {\r\n    var step = props.step, alt = props.alt, oct = props.oct, _a = props.dir, dir = _a === void 0 ? 1 : _a;\r\n    var f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined || oct === null)\r\n        return [dir * f];\r\n    var o = oct - FIFTH_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction unaltered(f) {\r\n    var i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\r\nfunction decode(f, o, dir) {\r\n    var step = STEPS[unaltered(f)];\r\n    var alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined)\r\n        return { step: step, alt: alt, dir: dir };\r\n    var oct = o + 4 * alt + FIFTH_OCTS[step];\r\n    return { step: step, alt: alt, oct: oct, dir: dir };\r\n}\r\nfunction memo(fn) {\r\n    var cache = {};\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n}\r\nvar encoder = function (props) { return function (str) {\r\n    var p = props(str);\r\n    return p.step === null ? null : encode(p);\r\n}; };\r\nvar encodeNote = memo(encoder(noteProps));\r\nvar encodeIvl = memo(encoder(iprops));\r\nexport function transpose(note, interval) {\r\n    if (arguments.length === 1)\r\n        return function (i) { return transpose(note, i); };\r\n    var n = encodeNote(note);\r\n    var i = encodeIvl(interval);\r\n    if (n === null || i === null)\r\n        return null;\r\n    var tr = n[1] === undefined || i[1] === undefined\r\n        ? [n[0] + i[0]]\r\n        : [n[0] + i[0], n[1] + i[1]];\r\n    return fromNote(decode(tr[0], tr[1]));\r\n}\r\nexport function trFifths(note, fifths) {\r\n    if (arguments.length === 1)\r\n        return function (f) { return trFifths(note, f); };\r\n    var n = encodeNote(note);\r\n    if (n === null)\r\n        return null;\r\n    return fromNote(decode(n[0] + fifths));\r\n}\r\nexport function fifths(from, to) {\r\n    if (arguments.length === 1)\r\n        return function (to) { return fifths(from, to); };\r\n    var f = encodeNote(from);\r\n    var t = encodeNote(to);\r\n    if (t === null || f === null)\r\n        return null;\r\n    return t[0] - f[0];\r\n}\r\nexport function transposeBy(interval, note) {\r\n    if (arguments.length === 1)\r\n        return function (n) { return transpose(n, interval); };\r\n    return transpose(note, interval);\r\n}\r\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\r\nvar decodeIvl = function (i) {\r\n    return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1);\r\n};\r\nexport function addIntervals(ivl1, ivl2, dir) {\r\n    var i1 = encodeIvl(ivl1);\r\n    var i2 = encodeIvl(ivl2);\r\n    if (i1 === null || i2 === null)\r\n        return null;\r\n    var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\r\n    return ibuild(decodeIvl(i));\r\n}\r\nexport function add(ivl1, ivl2) {\r\n    if (arguments.length === 1)\r\n        return function (i2) { return add(ivl1, i2); };\r\n    return addIntervals(ivl1, ivl2, 1);\r\n}\r\nexport function subtract(ivl1, ivl2) {\r\n    if (arguments.length === 1)\r\n        return function (i2) { return add(ivl1, i2); };\r\n    return addIntervals(ivl1, ivl2, -1);\r\n}\r\nexport function interval(from, to) {\r\n    if (to === undefined)\r\n        return function (t) { return interval(from, t); };\r\n    var f = encodeNote(from);\r\n    var t = encodeNote(to);\r\n    if (f === null || t === null || f.length !== t.length)\r\n        return null;\r\n    var d = f[1] === undefined || t[1] === undefined\r\n        ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\r\n        : [t[0] - f[0], t[1] - f[1]];\r\n    return ibuild(decodeIvl(d));\r\n}\r\nexport function semitones(from, to) {\r\n    if (arguments.length === 1)\r\n        return function (t) { return semitones(from, t); };\r\n    var f = noteProps(from);\r\n    var t = noteProps(to);\r\n    return f.midi !== null && t.midi !== null\r\n        ? t.midi - f.midi\r\n        : f.chroma !== null && t.chroma !== null\r\n            ? (t.chroma - f.chroma + 12) % 12\r\n            : null;\r\n}\r\n","dts":{"name":"/Users/dani/Code/Music/tonal/packages/distance/distance/index.d.ts","writeByteOrderMark":false,"text":"import { Note, PC } from \"tonal-note\";\r\nimport { Interval } from \"tonal-interval\";\r\ndeclare type Partial = (s: string) => string | null;\r\nexport declare function transpose(note: Note): (interval: Interval) => Note | null;\r\nexport declare function transpose(note: Note, interval: Interval): Note | null;\r\nexport declare function trFifths(note: Note, fifths: number): any;\r\nexport declare function trFifths(note: Note, fifths: number): PC;\r\nexport declare function fifths(from: any, to: any): number | ((to: any) => number | any | null) | null;\r\nexport declare function transposeBy(interval: any, note: any): any;\r\nexport declare function addIntervals(ivl1: any, ivl2: any, dir: any): any;\r\nexport declare function add(ivl1: any, ivl2: any): any;\r\nexport declare function subtract(ivl1: any, ivl2: any): any;\r\nexport declare function interval(from: Note, to?: Note): Interval | null | Partial;\r\nexport declare function semitones(from: any, to: any): number | ((t: any) => number | any | null) | null;\r\nexport {};\r\n"}}
