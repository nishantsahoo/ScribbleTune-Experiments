{"code":"var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nexport function names(accTypes) {\r\n    if (accTypes === void 0) { accTypes = undefined; }\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n}\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar TOKENIZE = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nexport function tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = TOKENIZE.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse(str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n}\r\nvar cached = {};\r\nexport function props(note) {\r\n    return cached[note] || (cached[note] = parse(note));\r\n}\r\nexport function name(str) {\r\n    return props(str).name;\r\n}\r\nexport function pc(str) {\r\n    return props(str).pc;\r\n}\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nexport function midi(note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n}\r\nexport function midiToFreq(midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\"\r\n        ? Math.pow(2, (midi - 69) / 12) * tuning\r\n        : null;\r\n}\r\nexport function freq(note) {\r\n    return props(note).freq || midiToFreq(note);\r\n}\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nexport function freqToMidi(freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nexport function chroma(str) {\r\n    return props(str).chroma;\r\n}\r\nexport function oct(str) {\r\n    return props(str).oct;\r\n}\r\nvar LETTERS = \"CDEFGAB\";\r\nexport function stepToLetter(step) {\r\n    return LETTERS[step];\r\n}\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar fillAcc = function (n) { return (n < 0 ? fillStr(\"b\", -n) : fillStr(\"#\", n)); };\r\nexport function altToAcc(alt) {\r\n    return typeof alt === \"number\" ? fillAcc(alt) : \"\";\r\n}\r\nexport function from(fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\r\nexport var build = from;\r\nexport function fromMidi(m, useSharps) {\r\n    if (useSharps === void 0) { useSharps = false; }\r\n    var midi = Math.round(m);\r\n    var pcs = useSharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[midi % 12];\r\n    var o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nexport function simplify(note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n}\r\nexport var enharmonic = function (note) { return simplify(note, false); };\r\n","dts":{"name":"/Users/dani/Code/Music/tonal/packages/note/note/index.d.ts","writeByteOrderMark":false,"text":"export declare type OrNull<T> = T | null;\r\nexport declare type PC = string;\r\nexport declare type Note = string;\r\ndeclare type NoteProperties = {\r\n    name: Note;\r\n    letter: string;\r\n    acc: string;\r\n    oct: number | null;\r\n    step: number;\r\n    pc: PC;\r\n    alt: number;\r\n    chroma: number;\r\n    midi: number | null;\r\n    freq: OrNull<number>;\r\n};\r\ndeclare type NoNoteProperties = {\r\n    name: null;\r\n    oct: null;\r\n    step: null;\r\n    pc: null;\r\n    alt: null;\r\n    chroma: null;\r\n    midi: null;\r\n    freq: null;\r\n};\r\nexport declare type Properties = Readonly<NoteProperties> | Readonly<NoNoteProperties>;\r\nexport declare function names(accTypes?: string | undefined): Note[];\r\nexport declare function tokenize(str: any): [string, string, string, string];\r\nexport declare function props(note: Note): Properties;\r\nexport declare function name(str: Note | any): Note | null;\r\nexport declare function pc(str: Note): PC | null;\r\nexport declare function midi(note: Note | number): number | null;\r\nexport declare function midiToFreq(midi: number, tuning?: number): number | null;\r\nexport declare function freq(note: Note | number): number | null;\r\nexport declare function freqToMidi(freq: number): number;\r\nexport declare function chroma(str: Note | PC): number | null;\r\nexport declare function oct(str: Note): number | null;\r\nexport declare function stepToLetter(step: number): string | undefined;\r\nexport declare function altToAcc(alt: number): string;\r\nexport declare function from(fromProps?: Partial<NoteProperties>, baseNote?: OrNull<Note>): Note | null;\r\nexport declare const build: typeof from;\r\nexport declare function fromMidi(m: number, useSharps?: boolean): Note;\r\nexport declare function simplify(note: Note, sameAcc?: boolean): Note | null;\r\nexport declare const enharmonic: (note: string) => string | null;\r\nexport {};\r\n"}}
