{"code":"var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nexport function names(types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n}\r\nexport function tokenize(str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nexport var qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nexport var altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nfunction parse(str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var num = +t[0];\r\n    var q = t[1];\r\n    var step = numToStep(num);\r\n    var type = TYPES[step];\r\n    if (type === \"M\" && q === \"P\")\r\n        return NO_IVL;\r\n    var name = \"\" + num + q;\r\n    var dir = num < 0 ? -1 : 1;\r\n    var simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    var alt = qToAlt(type, q);\r\n    var oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    var semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    var chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    return Object.freeze({\r\n        num: num,\r\n        q: q,\r\n        step: step,\r\n        type: type,\r\n        name: name,\r\n        dir: dir,\r\n        simple: simple,\r\n        alt: alt,\r\n        oct: oct,\r\n        semitones: semitones,\r\n        chroma: chroma\r\n    });\r\n}\r\nvar cache = {};\r\nexport function props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = parse(str));\r\n}\r\nexport function num(str) {\r\n    return props(str).num;\r\n}\r\nexport function name(str) {\r\n    return props(str).name;\r\n}\r\nexport function semitones(str) {\r\n    return props(str).semitones;\r\n}\r\nexport function chroma(str) {\r\n    return props(str).chroma;\r\n}\r\nexport function ic(ivl) {\r\n    var c = props(ivl).chroma;\r\n    var chroma = c !== null ? c : ivl;\r\n    return typeof chroma === \"number\" ? CLASSES[chroma % 12] : null;\r\n}\r\nexport function build(props) {\r\n    var _a = props || {}, num = _a.num, step = _a.step, alt = _a.alt, _b = _a.oct, oct = _b === void 0 ? 1 : _b, dir = _a.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n}\r\nexport function simplify(str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var ip = p;\r\n    return ip.simple + ip.q;\r\n}\r\nexport function invert(str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n}\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nexport function fromSemitones(num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n","dts":{"name":"/Users/dani/Code/Music/tonal/packages/interval/interval/index.d.ts","writeByteOrderMark":false,"text":"export declare type Interval = string;\r\ndeclare type IntervalProps = {\r\n    name: Interval;\r\n    num: number;\r\n    q: string;\r\n    step: number;\r\n    alt: number;\r\n    dir: number;\r\n    type: string;\r\n    simple: number;\r\n    semitones: number;\r\n    chroma: number;\r\n    oct: number;\r\n};\r\ndeclare type NoIntervalProps = {\r\n    name: null;\r\n    num: null;\r\n    q: null;\r\n    step: null;\r\n    alt: null;\r\n    dir: null;\r\n    type: null;\r\n    simple: null;\r\n    semitones: null;\r\n    chroma: null;\r\n    oct: null;\r\n};\r\nexport declare type Properties = Readonly<IntervalProps> | Readonly<NoIntervalProps>;\r\nexport declare function names(types?: string): string[];\r\nexport declare function tokenize(str?: string): [string, string] | null;\r\nexport declare const qToAlt: (type: string, q: string) => number | null;\r\nexport declare const altToQ: (type: string, alt: number) => string | null;\r\nexport declare function props(str: Interval): Properties;\r\nexport declare function num(str: Interval): number | null;\r\nexport declare function name(str: Interval): string | null;\r\nexport declare function semitones(str: Interval): number | null;\r\nexport declare function chroma(str: Interval): number | null;\r\nexport declare function ic(ivl: Interval | number): number | null;\r\nexport declare function build(props: Partial<IntervalProps>): string | null;\r\nexport declare function simplify(str: Interval): Interval | null;\r\nexport declare function invert(str: Interval): Interval | null;\r\nexport declare function fromSemitones(num: number): Interval;\r\nexport {};\r\n"}}
